{"version":3,"sources":["components/InputRange.js","components/Checkbox.js","components/Button.js","utils/generatePassword.js","components/PasswordGeneratorForm.js","App.js","serviceWorker.js","index.js"],"names":["InputRange","props","min","max","step","title","currState","className","type","onChange","value","Checkbox","types","concat","map","join","checked","defaultProps","Button","disabled","typeClasses","onClick","children","generateArrayFromRange","obj","result","i","from","to","push","passwordOptions","uppercase","lowercase","symbols","numbers","generatePassword","options","length","range","option","getASCIIRangeFromOptions","generateFilteredBinaryArray","binaryArray","Uint8Array","crypto","getRandomValues","filter","num","indexOf","password","String","fromCharCode","apply","slice","PasswordGeneratorForm","useState","passwordLength","setPasswordLength","setUppercase","setLowercase","setSymbols","setPassword","copyStatus","setCopyStatus","navigator","clipboard","writeText","input","document","createElement","setAttribute","style","position","left","body","appendChild","select","execCommand","removeChild","setTimeout","e","target","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36ea94c6.chunk.js","sourcesContent":["import React from 'react';\n\nimport './InputRange.css';\n\nfunction InputRange(props) {\n    const { min, max, step, title, currState } = props;\n\n    return (\n        <div className=\"input-range\">\n            <span className=\"input-range__title-indicator\">{`${title} ${currState}`}</span>\n            <div className=\"input-range__input\">\n                <span className=\"input-range__limit\">{min}</span>\n                <input type=\"range\" min={min} max={max} step={step}\n                className=\"input-range__slider\" onChange={props.onChange}\n                value={currState} />\n                <span className=\"input-range__limit\">{max}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default InputRange;","import React from 'react';\n\nimport './Checkbox.css';\n\nfunction Checkbox(props) {\n    const { title, value, types } = props\n    const className = ['checkbox'].concat(types.map(type => 'checkbox--' + type))\n    .join(' ');\n\n    return (\n        <div className={className}>\n            <span className=\"checkbox__title\">{title}</span>\n            <label>\n                <input type=\"checkbox\" onChange={props.onChange} className=\"checkbox__input\"\n                checked={value} />\n                <div className=\"checkbox__container\">\n                    <div className=\"checkbox__toggle\"></div>\n                </div>\n            </label>\n        </div>\n    );\n}\n\nCheckbox.defaultProps = {\n    types: []\n}\n\nexport default Checkbox;","import React from 'react';\n\nimport './Button.css';\n\nfunction Button(props) {\n    const { types = [], disabled } = props;\n    const typeClasses = types.map(type => 'button--' + type);\n    const className = ['button', ...typeClasses].join(' ');\n\n    return (\n        <button className={className} onClick={props.onClick} disabled={disabled}>\n            {props.children}\n        </button>\n    );\n}\n\nexport default Button;","function generateArrayFromRange(obj) {\n    const result = [];\n    for(let i = obj.from; i <= obj.to; i++) {\n        result.push(i);\n    }\n\n    return result;\n}\n\nconst passwordOptions = {\n    uppercase: () => {\n        return generateArrayFromRange({from: 65, to: 90});\n    },\n    lowercase: () => {\n        return generateArrayFromRange({from: 97, to: 122});\n    },\n    symbols: () => {\n        return [\n            ...generateArrayFromRange({from: 33, to: 47}),\n            ...generateArrayFromRange({from: 58, to: 64}),\n            ...generateArrayFromRange({from: 91, to: 96}),\n            ...generateArrayFromRange({from: 123, to: 126})\n        ];\n    },\n    numbers: () => {\n        return generateArrayFromRange({from: 48, to: 57});\n    }\n}\n\nfunction getASCIIRangeFromOptions(options) {\n    let range = passwordOptions.numbers();\n\n    for (const option in options) {\n        if (options[option]) {\n            range = range.concat(passwordOptions[option]());\n        }\n    }\n\n    return range;\n}\n\nfunction generatePassword(options) {\n    const { length, ...rangeOptions } = options;\n    const range = getASCIIRangeFromOptions(rangeOptions);\n\n    function generateFilteredBinaryArray() {\n        const binaryArray = new Uint8Array(length);\n        crypto.getRandomValues(binaryArray);\n\n        return binaryArray.filter(num => range.indexOf(num) > -1);\n    }\n\n    let password = '';\n    while(password.length < length) {\n        password += String.fromCharCode.apply(null, generateFilteredBinaryArray());\n    }\n\n    return password.slice(0, length);\n}\n\nconst getSymbols = passwordOptions.symbols;\n\nexport {\n    generatePassword, \n    getSymbols\n};","import React, { useState } from 'react';\nimport InputRange from './InputRange';\nimport Checkbox from './Checkbox';\nimport Button from './Button';\n\nimport './PasswordGeneratorForm.css';\nimport { generatePassword } from '../utils/generatePassword';\n\nfunction PasswordGeneratorForm(props) {\n    const [passwordLength, setPasswordLength] = useState(12);\n    const [uppercase, setUppercase] = useState(true);\n    const [lowercase, setLowercase] = useState(true);\n    const [symbols, setSymbols] = useState(true);\n    const [password, setPassword] = useState('');\n    const [copyStatus, setCopyStatus] = useState(false);\n\n    function handlePasswordLength(e) {\n        setPasswordLength(e.target.value);\n    }\n\n    function handleUppercase() {\n        setUppercase(!uppercase);\n    }\n\n    function handleLowercase() {\n        setLowercase(!lowercase);\n    }\n\n    function handleSymbols() {\n        setSymbols(!symbols);\n    }\n\n    function handlePasswordGenerator() {\n        const options = {\n            length: passwordLength,\n            uppercase,\n            lowercase,\n            symbols\n        }\n\n        setPassword(generatePassword(options));\n    }\n\n    function handleCopyToClipboard() {\n        if (navigator.clipboard) {\n            navigator.clipboard.writeText(password);\n        } else {\n            const input = document.createElement('input');\n            input.setAttribute('aria-hidden', true);\n            input.setAttribute('tabindex', -1);\n            input.style.position = 'absolute';\n            input.style.left = '-9999px';\n            input.value = password;\n            document.body.appendChild(input)\n            input.select();\n            document.execCommand('copy');\n            document.body.removeChild(input);\n        }\n\n        setCopyStatus(true);\n        setTimeout(() => {\n            setCopyStatus(false);\n        }, 3500);\n    }\n\n    return (\n        <div className=\"password-generator\">\n            <h1 className=\"password-generator__title\">Random Password Generator</h1>\n            <div className=\"password-generator__password-group\">\n                <span className=\"password-generator__password\">{password}</span>\n                <Button types={['primary', 'border-primary', 'copy']} onClick={handleCopyToClipboard} disabled={password === ''}>\n                    {copyStatus ? 'Copied' : 'Copy'}\n                </Button>\n            </div>\n            <InputRange min={12} max={36} step={1} title=\"Password Length:\"\n            currState={passwordLength} onChange={handlePasswordLength} />\n            <Checkbox title=\"Include Uppercase?\" onChange={handleUppercase}\n            value={uppercase} types={['horizontal']} />\n            <Checkbox title=\"Include Lowercase?\" onChange={handleLowercase}\n            value={lowercase} types={['horizontal']} />\n            <Checkbox title=\"Include Symbols?\" onChange={handleSymbols}\n            value={symbols} types={['horizontal']} />\n            <Button types={['primary', 'big', 'generate']} onClick={handlePasswordGenerator}>Generate</Button>\n        </div>\n    );\n}\n\nexport default PasswordGeneratorForm;","import React from 'react';\nimport './App.css';\nimport PasswordGeneratorForm from './components/PasswordGeneratorForm';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <PasswordGeneratorForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}